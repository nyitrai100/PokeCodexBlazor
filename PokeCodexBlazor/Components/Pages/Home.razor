@page "/"
@using PokeCodexBlazor
@inject PokemonService PokemonService
@rendermode InteractiveServer


<PageTitle>Pokecodex</PageTitle>

<div style="margin-bottom: 15px;">
    <h5 class="d-flex justify-content-center mt-3 mb-3">
        Search
    </h5>
    <div class="d-flex justify-content-center mb-3">
        <input type="text" @bind="temporaryInputValue"  style="background-color: red; border: 1px solid white; color: yellow; border-radius: 10px;" />
    </div>
    <div class="d-flex justify-content-center mt-1">
        <button @onclick="Search" style="  background-color: red;border-radius: 10px;">
            Search
        </button>
        @if (foundPokemon == true)
        {
            <button @onclick="Clear" style="border-radius: 10px; background-color: yellow;">
                Clear
            </button>
        }
    </div>
</div>
<div>
    <hr/>
    <p class="d-flex justify-content-center" style="color: black; text-decoration-style: double;">Pokemon types</p>
    <div class="container">
        <div class="d-flex align-items-center justify-content-around flex-wrap"  style="">
    
            @foreach (var pokemonType in PokemonTypeList)
            {
                    <button class="d-flex justify-content-center mt-2 me-2"
                            style="background-color: @GetCardBackgroundColor(pokemonType); color: black; text-decoration-style: double;  border: 1px solid black; border-radius: 5px; width: 60px; height: 30px;"
                            @onclick="@(() => PokemonTypeButton(@pokemonType))">
                        @pokemonType
                    </button>
    
            }
        </div>
        </div>
    
   

</div>
<hr/>
<strong>
    <p style="margin-bottom: 25px; margin-top: 25px; color: @GetCardBackgroundColor(@pokemonTypeOnClick); text-shadow: 0px 0px 20px black;">
        @pokemonTypeOnClick Pokemons:
    </p>
</strong>
@if (_pokemons == null)
{
    <p>Loading...</p>
}
else
{
    
        @foreach (var pokemon in _pokemons)
        {
            string gifFilePath = $"/images/pokemon/{pokemon.Name}.gif";
                
            // pokemon.Type1 
            bool showPokemon = string.IsNullOrEmpty(InputValue) || pokemon.Name.Contains(InputValue, StringComparison.OrdinalIgnoreCase);
            bool showByButton = pokemon.Type1.Contains(pokemonTypeOnClick);
            
            if (showPokemon && showByButton)
            {
                foundPokemon = true;
                string cardBackGroundColor = GetCardBackgroundColor(pokemon.Type1);
                <div class="d-inline-block" style="background-color: black; border-radius: 5px; margin-top: 2%; margin-left: 5%; margin-bottom: 2%;">
                    <div class="d-inline-block">
                        <div class="card border-dark" style="width: 100px; height: 140px; margin: 10px; background-color: @cardBackGroundColor;">
                            <div class="d-flex justify-content-center" style="margin-top: 10px;border-bottom: 2px solid black">
                                <img src="@gifFilePath" width="60px" height="60px" onerror="this.src='/images/default.gif'; this.onerror=null;"/>
                            </div>
                            <div class="d-flex justify-content-center" style="padding-top: 25%">
                                <p style="color: black;">@pokemon.Name</p>
                            </div>
                            <div>
                                <a href="@PokemonUrl(pokemon.Id)" class="d-flex justify-content-center" role="button" style="color:white; font-size: 15px; background-color: black; margin-top: 5px; border-bottom-left-radius: 5px; border-bottom-right-radius: 5px;">
                                    More Details
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        @if (!foundPokemon)
        {
            <h1>No Pokemon Found!</h1>
        }
}

@code{
    private bool foundPokemon = false;
    private string temporaryInputValue;
    private string pokemonTypeOnClick { get; set; } = string.Empty;
    private List<Pokemon> _pokemons = new List<Pokemon>();
    public List<string> PokemonTypeList = new List<string>();


    
    protected override async Task OnInitializedAsync()
    {
        _pokemons = await PokemonService.GetAllPokemonsAsync();
        PokemonTypeList = _pokemons.Select(p => p.Type1).Distinct().ToList();
    }
    private static string PokemonUrl(int id) => $"/PokemonDetails/{id}";
    private string InputValue { get; set; } = string.Empty;
    private string GetCardBackgroundColor(string type)
    {
        return type switch
        {
            "Water" => "blue",
            "Grass" => "lightGreen",
            "Normal" => "lightBlue",
            "Fire" => "red",
            "Bug" => "darkGreen",
            "Poison" => "purple",
            "Ground" => "saddleBrown",
            "Psychic" => "pink",
            "Fighting" => "lightGrey",
            "Rock" => "grey",
            "Electric" => "yellow",
            "Ghost" => "rebeccaPurple",
            "Ice" => "white",
            "Dragon" => "orange",
            _ => "black"
        };
    }

    private void Search()
    {
        InputValue = temporaryInputValue;
    }
    private void Clear()
    {
        InputValue = string.Empty;
        pokemonTypeOnClick = string.Empty;
        foundPokemon = false;
    }

    private void PokemonTypeButton(string pokemonType)
    {
        pokemonTypeOnClick = string.Empty;
        pokemonTypeOnClick += pokemonType;
        StateHasChanged();
    }
    
}
