@page "/"
@using PokeCodexBlazor
@inject PokemonService PokemonService
@rendermode InteractiveServer


<PageTitle>Pokecodex</PageTitle>

@* <h1>Pokemon List</h1> *@
<div style="margin-bottom: 15px;">
    <h5>Search</h5>
    <div class="d-inline">
        <input type="text" @bind="temporaryInputValue"/>
        <button @onclick="Search">Search</button>
        <button @onclick="Clear">Clear</button>
    </div>
</div>
<div>
    <p>Pokemon types:</p>
  
</div>
@if (_pokemons == null)
{
    <p>Loading...</p>
}
else
{
    bool foundPokemon = false;    
    
        @foreach (var pokemon in _pokemons)
        {
            string gifFilePath = $"/images/pokemon/{pokemon.Name}.gif";
            
            bool showPokemon = string.IsNullOrEmpty(InputValue) || pokemon.Name.Contains(InputValue, StringComparison.OrdinalIgnoreCase);
            
            if (showPokemon)
            {
                foundPokemon = true;
                string cardBackGroundColor = GetCardBackgroundColor(pokemon.Type1);

                <div class="d-inline-block" style="background-color: black; border-radius: 5px; margin-top: 2%; margin-left: 5%; margin-bottom: 2%;">
                    <div class="d-inline-block">
                        <div class="card border-dark" style="width: 100px; height: 140px; margin: 10px; background-color: @cardBackGroundColor;">
                            <div class="d-flex justify-content-center" style="margin-top: 10px;border-bottom: 2px solid black">
                                <img src="@gifFilePath" width="60px" height="60px" onerror="this.src='/images/default.gif'; this.onerror=null;"/>
                            </div>
                            <div class="d-flex justify-content-center" style="padding-top: 25%">
                                <p style="color: black;">@pokemon.Name</p>
                            </div>
                            <div>
                                <a href="@PokemonUrl(pokemon.Id)" class="d-flex justify-content-center" role="button" style="color:white; font-size: 15px; background-color: black; margin-top: 5px; border-bottom-left-radius: 5px; border-bottom-right-radius: 5px;">
                                    More Details
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        @if (!foundPokemon)
        {
            <h1>No Pokemon Found!</h1>
        }
}
     

@code{
    bool foundPokemon = false;
    private string temporaryInputValue;
    private List<Pokemon> _pokemons = new List<Pokemon>();
    
    protected override async Task OnInitializedAsync()
    {
        _pokemons = await PokemonService.GetAllPokemonsAsync();
    }
    private static string PokemonUrl(int id) => $"/PokemonDetails/{id}";
    private string InputValue { get; set; } = string.Empty;
    private string GetCardBackgroundColor(string type)
    {
        return type switch
        {
            "Water" => "blue",
            "Grass" => "lightGreen",
            "Normal" => "lightBlue",
            "Fire" => "red",
            "Bug" => "darkGreen",
            "Poison" => "purple",
            "Ground" => "saddleBrown",
            "Psychic" => "pink",
            "Fighting" => "lightGrey",
            "Rock" => "grey",
            "Electric" => "yellow",
            "Ghost" => "rebeccaPurple",
            _ => "black"
        };
    }

    private void Search()
    {
        InputValue = temporaryInputValue;
    }
    private void Clear()
    {
        InputValue = string.Empty;
    }
}