@page "/PokemonDetails/{id:int}"
@inject PokemonService PokemonService
@using PokeCodexBlazor
@rendermode InteractiveServer


<head>
    <link rel="stylesheet" href="PokemonDetails.css">
</head>

<button @onclick="BackButton" style="color: white; background-color: red; border-radius: 10px; padding-left: 7px; border: 2px solid black; padding-right: 7px;">
    Back
</button>

@if (pokemon == null)
{
    <p>Loading...</p>
}
else
{
    string gifFilePath = $"/images/pokemon/{pokemon.Name}.gif";
    string pokemonTypePath = $"/images/pokemon-types/Battrio_{pokemon.Type1}_type.png";
    string pokemonType2Path = $"/images/pokemon-types/Battrio_{pokemon.Type2}_type.png";
    string secondLevelPokemon = nextLevelPokemon != null ? $"/images/pokemon/{nextLevelPokemon.Name}.gif" : "";
    string firstLevelPokemon = backLevelPokemon != null ? $"/images/pokemon/{backLevelPokemon.Name}.gif" : "";
    string thirdLevelPokemon = nextNextLevelPokemon != null ? $"/images/pokemon/{nextNextLevelPokemon.Name}.gif" : "";
    string firstLevelPokemonForThirdLPokemons = backBackLevelPokemon != null ? $"/images/pokemon/{backBackLevelPokemon.Name}.gif" : "";
    <div style="margin-bottom: 670px">
        <div id="pokedex">
            <div id="left">
                <div id="logo"></div>
                <div id="bg_curve1_left"></div>
                <div id="bg_curve2_left">
                </div>
                <div id="curve1_left">
                    <div id="buttonGlass">
                        <div id="reflect"> </div>
                    </div>
                    <div id="miniButtonGlass1"></div>
                    <div id="miniButtonGlass2"></div>
                    <div id="miniButtonGlass3"></div>
                </div>
                <div id="curve2_left">
                    <div id="junction">
                        <div id="junction1"></div>
                        <div id="junction2"></div>
                    </div>
                </div>
                <div id="screen">
                    <div id="topPicture">
                        <div id="buttontopPicture1"></div>
                        <div id="buttontopPicture2"></div>
                    </div>
                    <div id="picture">
                        <div style="margin-top: 10%">
                            <img src="@gifFilePath" height="100px" onerror="this.src='/images/default.gif'; this.onerror=null;" />
                        </div>
                    </div>
                    <div id="buttonbottomPicture"></div>
                    <div id="speakers">
                        <div class="sp"></div>
                        <div class="sp"></div>
                        <div class="sp"></div>
                        <div class="sp"></div>
                    </div>
                </div>
                <div id="bigbluebutton"></div>
                <div id="barbutton1"></div>
                <div id="barbutton2"></div>
                <div id="cross">
                    <div id="leftcross">
                        <div id="leftT" @onclick="PreviousPokemonClick" style="cursor: pointer;"></div>
                    </div>
                    <div id="topcross">
                        <div id="upT"> </div>
                    </div>
                    <div id="rightcross">
                         
                        <div id="rightT" @onclick="NextPokemonClick" style="cursor: pointer; "></div>
                    </div>
                    <div id="midcross">
                        <div id="midCircle"></div>
                    </div>
                    <div id="botcross">
                        <div id="downT"></div>
                    </div>
                </div>
            </div>
            <div id="right">
                <div id="stats">
                    <strong>@pokemon.Description</strong><br />
                </div>
                <div style="width: 130px; position: absolute; top: 249px; left: 39px; z-index: 1; font-size: small; color: white; text-decoration-style: double;">
                    <p>Strong: 
                        @foreach (var type in StrongAgainstTypes)
                                   {
                                       <img src="@GetStrongAgainstImagePath(type)" style="width: 20px; height: 20px; margin-top: -2px;" alt="@type"/>
                                   } </p> 
                </div>
                 <div style="width: 150px; position: absolute; top: 249px; left: 171px; z-index: 1; font-size: small; color: white; text-decoration-style: double;">
                     <p>Weak:
                         @foreach (var type in WeakAgainstTypes)
                         {
                             <img src="@GetWeakAgainstImagePath(type)" style="width: 20px; height: 20px; margin-top: -2px;" alt="@type"/> 
                         }
                     </p>
    
                     </div>
                <div id="blueButtons1">
                    <div class="blueButton">
                        <p style="display: flex; position: absolute; top: -13px; left: 11px; font-size: xx-small; color: white; text-decoration-style: double; "> Type</p>
                        <img src="@pokemonTypePath" style="width: 30px; height: 30px; margin-left: 7px; margin-top: 3px;" alt="@pokemon.Type1"/>
                    </div>
                    <div class="blueButton">
                        <p style="display: flex; position: absolute; top: -13px; left: 59px; font-size: xx-small; color: white; text-decoration-style: double; "> Type-2</p>
                        @if (pokemon.Type2 != null)
                        {
                            <img src="@pokemonType2Path" style="width: 30px; height: 30px; margin-left: 7px; margin-top: 3px;" alt="@pokemon.Type2"/>
                        }
                        else
                        {
                            <p style="display: flex; justify-content: center;  margin-top: 9px; font-size: 11px; color: white;">None</p>
                        }
                    </div>
                    <div class="blueButton">
                        <p style="display: flex; position: absolute; top: -13px; left: 111px; font-size: xx-small; color: white; text-decoration-style: double; "> Height</p>
                        <p style="display:flex; justify-content: center; margin-top: 9px; font-size: 11px; color: white;">@pokemon.Height</p> 
                    </div>
                    <div class="blueButton">
                        <p style="display: flex; position: absolute; top: -13px; left: 163px; font-size: xx-small; color: white; text-decoration-style: double; "> Weight</p>
                        <p style="display:flex; justify-content: center; margin-top: 9px; font-size: 11px; color: white; ">@pokemon.Weight</p> 
                    </div>
                    <div class="blueButton">
                         <p style="display: flex; position: absolute; top: -13px; left: 219px; font-size: xx-small; color: white; text-decoration-style: double; "> Level</p>
                         <p style="display:flex; justify-content: center; margin-top: 9px; font-size: 11px; color: white; ">@pokemon.Level</p> 
                    </div>
                </div>
                <div id="blueButtons2">
                    <div class="blueButton">
                        <p style="display:flex; justify-content: center; margin-top: 10px; font-size: 11px; color: @TypesColor(@pokemon.Type1); ">
                            @pokemon.Type1
                        </p> 
                    </div>
                    <div class="blueButton">
                        @if (pokemon.Type2 != null)
                        {
                            <p style="display:flex; justify-content: center; margin-top: 10px; font-size: 11px; color: @TypesColor(@pokemon.Type2); ">
                                @pokemon.Type2
                            </p>
                        }
                        else
                        {
                            <p style="display:flex; justify-content: center; margin-top: 10px; font-size: 11px; color: white; ">
                                None
                            </p>
                        }
                    </div>
                    <div class="blueButton">
                        @switch (pokemon.Height)
                        {
                          case < 40 :  
                              <p style="display:flex; justify-content: center; margin-top: 10px; font-size: 11px; color: white;">
                                   Small
                              </p>
                              break;
                              
                          case < 60:
                              <p style="display:flex; justify-content: center; margin-top: 10px; font-size: 11px; color: white;">
                                  Medium
                              </p>
                              break;
                              
                          case < 110:
                              <p style="display:flex; justify-content: center; margin-top: 10px; font-size: 11px; color: white;">
                                  Big
                              </p>
                              break;
                              
                          case > 110:
                              <p style="display:flex; justify-content: center; margin-top: 10px; font-size: 11px; color: white;">
                                  Huge
                              </p>
                              break;
                              
                          default:
                              <p style="display:flex; justify-content: center; margin-top: 10px; font-size: 11px; color: white;">
                                  None
                              </p>
                              break;
                        }
                    </div>
                    <div class="blueButton">
                        @switch (pokemon.Weight)
                        {
                            case < 25:
                                <p style="display:flex; justify-content: center; margin-top: 10px; font-size: 11px; color: white;">
                                    Light
                                </p>
                                break;
                                
                            case < 50:
                                <p style="display:flex; justify-content: center; margin-top: 10px; font-size: 11px; color: white;">
                                    Middle
                                </p>
                                break;
                                
                            case < 100:
                                <p style="display:flex; justify-content: center; margin-top: 10px; font-size: 11px; color: white;">
                                    Heavy
                                </p>
                                break;
                                
                            case > 100:
                                <p style="display:flex; justify-content: center; margin-top: 10px; font-size: 11px; color: white;">
                                    S-Heavy
                                </p>
                                break;
                        }
                    </div>
                    <div class="blueButton">
                        @if (nextLevelPokemon != null)
                        {
                            if(pokemon.Name == "Vaporeon" || pokemon.Name == "Jolteon") 
                            {
                                <p style="display:flex; justify-content: center; margin-top: 10px; font-size: 11px; color: white;">
                                    Max
                                </p>
                            }
                            if (pokemon.Level == 3 || nextLevelPokemon.Level == 1)
                            {
                                <p style="display:flex; justify-content: center; margin-top: 10px; font-size: 11px; color: white;">
                                    Max
                                </p>
                            }
                        }
                        else
                        {
                            <p style="display:flex; justify-content: center; margin-top: 10px; font-size: 11px; color: white;">
                                Max
                            </p>
                        }
                    </div>
                </div>
                <div id="miniButtonGlass4"></div>
                <div id="miniButtonGlass5"></div>
                <div id="barbutton3"></div>
                <div id="barbutton4"></div>
                
                @if (pokemon.Id != pokemonNumbers && pokemon.Id != 150 && nextLevelPokemon.Level != pokemon.Level)
                {
                    <div id="yellowBox1" class="d-flex justify-content-center">
                        @switch (pokemon.Level)
                        {
                            case 1:
                                if (pokemon.Id != pokemonNumbers && nextLevelPokemon != null && nextLevelPokemon.Level > 1)
                                {
                                    <p style="display: flex; position: absolute; top: 71px; font-size: xx-small; color: white; text-decoration-style: double; ">
                                         Level 2
                                    </p>
                                    <img src="@secondLevelPokemon"  height="fit-content" onerror="this.src='/images/default.gif'; this.onerror=null;" />
                                    @* <button @onclick="SecondLevelPokemonClick"></button> *@
                                }
                                break;
                            case 2:
                                if (backLevelPokemon != null && backLevelPokemon.Level == 1)
                                {
                                    <p style="display: flex; position: absolute; top: 71px; font-size: xx-small; color: white; text-decoration-style: double; ">
                                        Level 1
                                    </p>
                                    <img src="@firstLevelPokemon" height="fit-content" onerror="this.src='/images/default.gif'; this.onerror=null;" />
                                    @* <button @onclick="FirstLevelPokemonClick"></button> *@
                                }
                                break;
                            case 3:
                                if (backBackLevelPokemon != null && backBackLevelPokemon.Level == 1)
                                {
                                    <p style="display: flex; position: absolute; top: 71px; font-size: xx-small; color: white; text-decoration-style: double; ">
                                        Level 1
                                    </p>
                                    <img src="@firstLevelPokemonForThirdLPokemons" height="fit-content" onerror="this.src='/images/default.gif'; this.onerror=null;" />
                                    
                                }
                                break;
                            default:
                                <p style="display: flex; align-items: center; justify-content: center; width: 140px; height: 70px;">
                                    NONE
                                </p>
                                break;
                        }
                    </div>
                }

                  @if (pokemon.Name == "Jolteon" || pokemon.Name == "Flareon")
                    {
                      <div id="yellowBox1" class="d-flex justify-content-center">
                           <img src="images/pokemon/Eevee.gif" height="fit-content" onerror="this.src='/images/default.gif'; this.onerror=null;" />
                       </div>
                    }


                @if (pokemon.Id != pokemonNumbers && pokemon.Id != 150 && nextLevelPokemon.Level != pokemon.Level && nextNextLevelPokemon.Level != pokemon.Level && pokemon.Name != "Flareon")
                {
                    <div id="yellowBox2" class="d-flex justify-content-center">
                        @switch (pokemon.Level)
                        {
                            case 1:
                                if (pokemon.Id != 151 && pokemon.Id != 150 && nextNextLevelPokemon != null && nextNextLevelPokemon.Level == 3)
                                {
                                    <p style="display: flex; position: absolute; top: 71px; font-size: xx-small; color: white; text-decoration-style: double; ">
                                        Level 3
                                    </p>
                                    <img src="@thirdLevelPokemon" height="fit-content" onerror="this.src='/images/default.gif'; this.onerror=null;" />
                                }

                                else if (pokemon.Name == "Eevee")
                                {
                                    <p style="display: flex; position: absolute; top: 71px; font-size: xx-small; color: white; text-decoration-style: double; ">
                                        Level 2
                                    </p>
                                    <img src="images/pokemon/Flareon.gif" height="fit-content" onerror="this.src='/images/default.gif'; this.onerror=null;" />
                                }
                                break;
                            case 2:
                                if (nextLevelPokemon != null && nextLevelPokemon.Level > 2)
                                {
                                    <p style="display: flex; position: absolute; top: 71px; font-size: xx-small; color: white; text-decoration-style: double; ">
                                        Level 3
                                    </p>
                                    <img src="@secondLevelPokemon" height="fit-content" onerror="this.src='/images/default.gif'; this.onerror=null;" />
                                }
                                break;
                            case 3:
                                if (backLevelPokemon != null && backLevelPokemon.Level == 2)
                                {
                                    <p style="display: flex; position: absolute; top: 71px; font-size: xx-small; color: white; text-decoration-style: double; ">
                                        Level 2
                                    </p>
                                    <img src="@firstLevelPokemon" height="fit-content" onerror="this.src='/images/default.gif'; this.onerror=null;" />
                                }
                                break;
                            default:
                                break;
                        }

                    </div>
                }
                <div id="bg_curve1_right"></div>
                <div id="bg_curve2_right"></div>
                <div id="curve1_right" style="color: white;padding: 28px;"> @pokemon.Name</div>
                <div id="curve2_right"> <div style="color: white; width: 100%; display: flex;justify-content: flex-end;"> @pokemon.Id/@pokemonNumbers</div></div>
            </div>
        </div>
    </div>
}

@code {
    int pokemonNumbers = 0;

    [Parameter] public int Id { get; set; }

    private Pokemon pokemon;
    private Pokemon nextLevelPokemon;
    private Pokemon backLevelPokemon;
    private Pokemon nextNextLevelPokemon;
    private Pokemon backBackLevelPokemon;
    private List<string> StrongAgainstTypes = new List<string>();
    private List<string> WeakAgainstTypes = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        var pokemons = await PokemonService.GetAllPokemonsAsync();
        pokemonNumbers = pokemons.Count;
        pokemon = pokemons.FirstOrDefault(p => p.Id == Id);
        nextLevelPokemon = pokemons.FirstOrDefault(p => p.Id == Id + 1);
        nextNextLevelPokemon = pokemons.FirstOrDefault(p => p.Id == Id + 2);
        backLevelPokemon = pokemons.FirstOrDefault(p => p.Id == Id - 1);
        backBackLevelPokemon = pokemons.FirstOrDefault(p => p.Id == Id - 2);
        GetStrongAgainstTypes(pokemon.Type1);
        GetWeakAgainstTypes(pokemon.Type1);
    }

    
    [Inject]
    private NavigationManager NavigationManager { get; set; }

    private void BackButton()
    {
        NavigationManager.NavigateTo("/");
    }

    
    public async Task NextPokemonClick()
    {
        if (Id != pokemonNumbers)
        {
            Id++;
            await OnInitializedAsync();
            StateHasChanged();
        }
        else
        {
            Id = 1;
            await OnInitializedAsync();
            StateHasChanged();
        }
    }

    public async Task PreviousPokemonClick()
    {
        if (Id != 1)
        {
            Id--;
            await OnInitializedAsync();
            StateHasChanged();
        }
        else
        {
            Id = pokemonNumbers;
            await OnInitializedAsync();
            StateHasChanged();
        }
    }


    
    private string TypesColor(string type)
    {
        return type switch
        {
            "Water" => "skyblue",
            "Grass" => "lightGreen",
            "Normal" => "lightBlue",
            "Fire" => "red",
            "Bug" => "darkseaGreen",
            "Poison" => "purple",
            "Ground" => "sandyBrown",
            "Psychic" => "pink",
            "Fighting" => "lightGrey",
            "Rock" => "grey",
            "Electric" => "yellow",
            "Ghost" => "rebeccaPurple",
            "Ice" => "white",
            "Dragon" => "orange",
            "Flying" => "floralwhite",
            _ => "black"
        };
    }
    
    
    private string GetStrongAgainstImagePath(string type)
    {
        return $"/images/pokemon-types/Battrio_{type}_type.png";
    }
    private void GetStrongAgainstTypes(string type)
{
    StrongAgainstTypes.Clear();
    switch (type)
    {
        case "Dragon":
            StrongAgainstTypes.Add("Dragon");
            break;
        case "Electric":
            StrongAgainstTypes.Add("Water");
            StrongAgainstTypes.Add("Flying");
            break;
        case "Fighting":
            StrongAgainstTypes.Add("Normal");
            StrongAgainstTypes.Add("Ice");
            StrongAgainstTypes.Add("Rock");
            break;
        case "Fire":
            StrongAgainstTypes.Add("Grass");
            StrongAgainstTypes.Add("Ice");
            StrongAgainstTypes.Add("Bug");
            break;
        case "Ghost":
            StrongAgainstTypes.Add("Psychic");
            StrongAgainstTypes.Add("Ghost");
            break;
        case "Grass":
            StrongAgainstTypes.Add("Water");
            StrongAgainstTypes.Add("Ground");
            StrongAgainstTypes.Add("Rock");
            break;
        case "Ground":
            StrongAgainstTypes.Add("Fire");
            StrongAgainstTypes.Add("Electric");
            StrongAgainstTypes.Add("Poison");
            StrongAgainstTypes.Add("Rock");
            break;
        case "Ice":
            StrongAgainstTypes.Add("Grass");
            StrongAgainstTypes.Add("Ground");
            StrongAgainstTypes.Add("Flying");
            StrongAgainstTypes.Add("Dragon");
            break;
        case "Normal":
            break;
        case "Poison":
            StrongAgainstTypes.Add("Grass");
            break;
        case "Psychic":
            StrongAgainstTypes.Add("Fighting");
            StrongAgainstTypes.Add("Poison");
            break;
        case "Rock":
            StrongAgainstTypes.Add("Fire");
            StrongAgainstTypes.Add("Ice");
            StrongAgainstTypes.Add("Flying");
            StrongAgainstTypes.Add("Bug");
            break;
        case "Water":
            StrongAgainstTypes.Add("Fire");
            StrongAgainstTypes.Add("Ground");
            StrongAgainstTypes.Add("Rock");
            break;
        default:
            break;
    }
}
    private string GetWeakAgainstImagePath(string type)
    {
        return $"/images/pokemon-types/Battrio_{type}_type.png";
    }

    private void GetWeakAgainstTypes(string type)
    {
        WeakAgainstTypes.Clear();
        switch (type)
        {
           case "Bug": 
               WeakAgainstTypes.Add("Fire"); 
               WeakAgainstTypes.Add("Fighting"); 
               WeakAgainstTypes.Add("Poison"); 
               WeakAgainstTypes.Add("Flying");
               WeakAgainstTypes.Add("Ghost"); 
               break;
               
           case "Dragon":
               break;
               
           case "Electric":
               WeakAgainstTypes.Add("Grass"); 
               WeakAgainstTypes.Add("Electric"); 
               WeakAgainstTypes.Add("Dragon"); 
               WeakAgainstTypes.Add("Ground"); 
               break;
               
           case "Fighting":
               WeakAgainstTypes.Add("Poison"); 
               WeakAgainstTypes.Add("Psychic"); 
               WeakAgainstTypes.Add("Bug"); 
               WeakAgainstTypes.Add("Ghost"); 
               break;
               
           case "Fire":
               WeakAgainstTypes.Add("Fire");
               WeakAgainstTypes.Add("Water");
               WeakAgainstTypes.Add("Rock");
               WeakAgainstTypes.Add("Dragon"); 
               break;
               
           case "Ghost": 
               WeakAgainstTypes.Add("Normal"); 
               break;
               
           case "Grass":
               WeakAgainstTypes.Add("Fire");
               WeakAgainstTypes.Add("Grass");
               WeakAgainstTypes.Add("Bug");
               WeakAgainstTypes.Add("Dragon"); 
               break;
               
           case "Ground":
               WeakAgainstTypes.Add("Grass");
               WeakAgainstTypes.Add("Bug"); 
               break;
               
           case "Ice":
               WeakAgainstTypes.Add("Fire");
               WeakAgainstTypes.Add("Water"); 
               WeakAgainstTypes.Add("Ice"); 
               break;
               
           case "Normal":
               WeakAgainstTypes.Add("Rock");
               WeakAgainstTypes.Add("Ghost"); 
               break;
               
           case "Poison":
               WeakAgainstTypes.Add("Poison");
               WeakAgainstTypes.Add("Ground"); 
               WeakAgainstTypes.Add("Rock"); 
               WeakAgainstTypes.Add("Ghost");
               break;
               
           case "Psychic":
               WeakAgainstTypes.Add("Psychic");
               break;
               
           case "Rock":
               WeakAgainstTypes.Add("Fighting");
               WeakAgainstTypes.Add("Ground"); 
               break;
               
           case "Water":
               break;
        }
    }

}

